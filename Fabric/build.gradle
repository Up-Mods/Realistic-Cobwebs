plugins {
    alias quilt.plugins.quilt.loom
}

project.configurations.runtimeClasspath {
    exclude(group: "loom_mappings_1_20_1_layered_hash_1247511328_v2.net.fabricmc", module: "fabric-loader")
}

dependencies {
    minecraft libs.minecraft
    mappings(loom.layered {
        it.parchment("${libs.parchment.mappings.get()}@zip")
        it.officialMojangMappings()
    })

    modImplementation fabric.fabric.loader
    modImplementation (fabric.fabric.api) {
        exclude group: "net.fabricmc", module: "fabric-loader"
    }

    compileOnly project(":Common")

    modImplementation (libs.resourcefulconfig.fabric) {
        exclude group: "net.fabricmc", module: "fabric-loader"
    }

    modCompileOnly (fabric.modmenu) {
        transitive = false
    }
    modLocalRuntime (fabric.modmenu) {
        transitive = false
    }

    // modCompileOnly "${libs.emi.fabric.get()}:api"
}

loom {
    mods {
        "${mod_id}" {
            // Tell Loom about each source set used by your mod here. This ensures that your mod's classes are properly transformed by Loader.
            sourceSet("main")
        }
    }
    if (project(":Common").file("src/main/resources/${mod_id}.accesswidener").exists()) {
        accessWidenerPath.set(project(":Common").file("src/main/resources/${mod_id}.accesswidener"))
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }

    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")

            if (rootProject.hasProperty('mc_uuid')) {
                programArgs("--uuid", rootProject.mc_uuid)
            }

            if (rootProject.hasProperty('mc_username')) {
                programArgs("--username", rootProject.mc_username)
            }

            if (rootProject.hasProperty('mc_java_agent_path')) {
                vmArg("-javaagent:${rootProject.mc_java_agent_path}")
            }
        }

        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run/server")
        }
    }
}

tasks.named("compileJava", JavaCompile) {
    source(project(":Common").sourceSets.main.allJava)
}

tasks.named("javadoc", Javadoc) {
    source(project(":Common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
    from(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(":Common").sourceSets.main.resources
}
